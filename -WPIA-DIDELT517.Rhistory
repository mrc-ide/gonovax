expect_true(all(y$I[length(tt), , ] == inits$I0[, 1]))
expect_true(all(y$A[length(tt), , ] == inits$A0[, 1]))
expect_true(all(y$S[length(tt), , ] == inits$S0[, 1]))
expect_true(all(y$T[length(tt), , ] == inits$T0[, 1]))
expect_true(5 == inits$t)
## check that restarting works properly
tt1 <- seq.int(0, 10)
y1 <- mod$run(tt1)
y1 <- mod$transform_variables(y1)
params2 <- model_params(gono_params = gono_params(1)[[1]],
init_params = inits, n_diag_rec = n_diag_rec)
mod2 <- model$new(user = params2, unused_user_action = "ignore")
y2 <- mod2$run(seq.int(inits$t, 10))
y2 <- mod2$transform_variables(y2)
expect_equivalent(y1$U[y1$t >= 5, , , drop = FALSE], y2$U, tol = 0.1)
expect_equivalent(y1$lambda[y1$t >= 5, , drop = FALSE], y2$lambda, tol = 1e-5)
}
n_diag_rec <- 2
## check with single parameter set
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5)
y <- mod$run(tt)
y <- mod$transform_variables(y)
inits <- restart_params(y, n_vax = 1)
inits
y$U
y$U[length(tt), , ]
inits$U0
load_all()
inits <- restart_params(y, n_vax = 1)
y$U
i_vax
n_diag_rec <- i
## check with single parameter set
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5)
y <- mod$run(tt)
y <- mod$transform_variables(y)
inits <- restart_params(y, n_vax = n_diag_rec)
load_all()
load_all()
i <- 2
n_diag_rec <- i
## check with single parameter set
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5)
y <- mod$run(tt)
y <- mod$transform_variables(y)
inits <- restart_params(y, n_vax = n_diag_rec)
expect_true(all(y$U[length(tt), , ] == inits$U0[, 1]))
inits
y$U[length(tt), , ]
inits$U0[, 1]
inits$U0
inits$t
n_diag_rec <- i
## check with single parameter set
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5)
y <- mod$run(tt)
y <- mod$transform_variables(y)
inits <- restart_params(y, n_vax = n_diag_rec)
expect_true(all(y$U[length(tt), , ] == inits$U0[, 1:n_diag_rec]))
expect_true(all(y$I[length(tt), , ] == inits$I0[, 1:n_diag_rec]))
expect_true(all(y$A[length(tt), , ] == inits$A0[, 1:n_diag_rec]))
expect_true(all(y$S[length(tt), , ] == inits$S0[, 1:n_diag_rec]))
expect_true(all(y$T[length(tt), , ] == inits$T0[, 1]))
n_diag_rec <- i
## check with single parameter set
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5)
y <- mod$run(tt)
y <- mod$transform_variables(y)
inits <- restart_params(y, n_vax = n_diag_rec)
expect_true(all(y$U[length(tt), , ] == inits$U0[, 1:n_diag_rec]))
expect_true(all(y$I[length(tt), , ] == inits$I0[, 1:n_diag_rec]))
expect_true(all(y$A[length(tt), , ] == inits$A0[, 1:n_diag_rec]))
expect_true(all(y$S[length(tt), , ] == inits$S0[, 1:n_diag_rec]))
expect_true(all(y$T[length(tt), , ] == inits$T0[, 1:n_diag_rec]))
expect_true(5 == inits$t)
## check that restarting works properly
tt1 <- seq.int(0, 10)
y1 <- mod$run(tt1)
y1 <- mod$transform_variables(y1)
params2 <- model_params(gono_params = gono_params(1)[[1]],
init_params = inits, n_diag_rec = n_diag_rec)
mod2 <- model$new(user = params2, unused_user_action = "ignore")
y2 <- mod2$run(seq.int(inits$t, 10))
y2 <- mod2$transform_variables(y2)
expect_equivalent(y1$U[y1$t >= 5, , , drop = FALSE], y2$U, tol = 0.1)
expect_equivalent(y1$lambda[y1$t >= 5, , drop = FALSE], y2$lambda, tol = 1e-5)
test_that("can initialise after time 0", {
for (i in 1:5){
n_diag_rec <- i
## check with single parameter set
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5)
y <- mod$run(tt)
y <- mod$transform_variables(y)
inits <- restart_params(y, n_vax = n_diag_rec)
expect_true(all(y$U[length(tt), , ] == inits$U0[, 1:n_diag_rec]))
expect_true(all(y$I[length(tt), , ] == inits$I0[, 1:n_diag_rec]))
expect_true(all(y$A[length(tt), , ] == inits$A0[, 1:n_diag_rec]))
expect_true(all(y$S[length(tt), , ] == inits$S0[, 1:n_diag_rec]))
expect_true(all(y$T[length(tt), , ] == inits$T0[, 1:n_diag_rec]))
expect_true(5 == inits$t)
## check that restarting works properly
tt1 <- seq.int(0, 10)
y1 <- mod$run(tt1)
y1 <- mod$transform_variables(y1)
params2 <- model_params(gono_params = gono_params(1)[[1]],
init_params = inits, n_diag_rec = n_diag_rec)
mod2 <- model$new(user = params2, unused_user_action = "ignore")
y2 <- mod2$run(seq.int(inits$t, 10))
y2 <- mod2$transform_variables(y2)
expect_equivalent(y1$U[y1$t >= 5, , , drop = FALSE], y2$U, tol = 0.1)
expect_equivalent(y1$lambda[y1$t >= 5, , drop = FALSE], y2$lambda, tol = 1e-5)
}
})
test_that("t_stop is working correctly", {
## check with single parameter set
for (i in 1:5){
n_diag_rec <- i
vp <- vax_params_xvwv(vbe = 0, uptake = 1, strategy = "VoD", vea = 1,
t_stop = 2 / 365, n_diag_rec)
params <- model_params(gono_params = gono_params(1)[[1]],
vax_params = vp, n_diag_rec = n_diag_rec)
mod <- model_Diagnosis$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt, )
y <- mod$transform_variables(y)
expect_equal(diff(apply(y$cum_vaccinated, 1, sum))[tt[-length(tt)] > 2 / 365],
c(0, 0))
}
})
test_that("t_stop is working correctly", {
## check with single parameter set
for (i in 1:5){
n_diag_rec <- i
vp <- vax_params_xvwv(vbe = 0, uptake = 1, strategy = "VoD", vea = 1,
t_stop = 2 / 365, n_diag_rec)
params <- model_params(gono_params = gono_params(1)[[1]],
vax_params = vp, n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt, )
y <- mod$transform_variables(y)
expect_equal(diff(apply(y$cum_vaccinated, 1, sum))[tt[-length(tt)] > 2 / 365],
c(0, 0))
}
})
for (i in 1:1){
n_diag_rec <- i
vp <- vax_params_xvwv(vbe = 0, uptake = 1, strategy = "VoD", vea = 1,
t_stop = 2 / 365, n_diag_rec)
params <- model_params(gono_params = gono_params(1)[[1]],
vax_params = vp, n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt, )
y <- mod$transform_variables(y)
expect_equal(diff(apply(y$cum_vaccinated, 1, sum))[tt[-length(tt)] > 2 / 365],
c(0, 0))
}
for (i in 2:2){
n_diag_rec <- i
vp <- vax_params_xvwv(vbe = 0, uptake = 1, strategy = "VoD", vea = 1,
t_stop = 2 / 365, n_diag_rec)
params <- model_params(gono_params = gono_params(1)[[1]],
vax_params = vp, n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt, )
y <- mod$transform_variables(y)
expect_equal(diff(apply(y$cum_vaccinated, 1, sum))[tt[-length(tt)] > 2 / 365],
c(0, 0))
}
vp <- vax_params_xvwv(vbe = 0, uptake = 1, strategy = "VoD", vea = 1,
t_stop = 2 / 365, n_diag_rec)
n_diag_rec <- i
vp <- vax_params_xvwv(vbe = 0, uptake = 1, strategy = "VoD", vea = 1,
t_stop = 2 / 365, n_diag_rec = n_diag_rec)
for (i in 2:2){
n_diag_rec <- i
vp <- vax_params_xvwv(vbe = 0, uptake = 1, strategy = "VoD", vea = 1,
t_stop = 2 / 365, n_diag_rec = n_diag_rec)
params <- model_params(gono_params = gono_params(1)[[1]],
vax_params = vp, n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt, )
y <- mod$transform_variables(y)
expect_equal(diff(apply(y$cum_vaccinated, 1, sum))[tt[-length(tt)] > 2 / 365],
c(0, 0))
}
})
test_that("t_stop is working correctly", {
## check with single parameter set
for (i in 2:2){
n_diag_rec <- i
vp <- vax_params_xvwv(vbe = 0, uptake = 1, strategy = "VoD", vea = 1,
t_stop = 2 / 365, n_diag_rec = n_diag_rec)
params <- model_params(gono_params = gono_params(1)[[1]],
vax_params = vp, n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt, )
y <- mod$transform_variables(y)
expect_equal(diff(apply(y$cum_vaccinated, 1, sum))[tt[-length(tt)] > 2 / 365],
c(0, 0))
}
})
test_that("t_stop is working correctly", {
## check with single parameter set
for (i in 1:5){
n_diag_rec <- i
vp <- vax_params_xvwv(vbe = 0, uptake = 1, strategy = "VoD", vea = 1,
t_stop = 2 / 365, n_diag_rec = n_diag_rec)
params <- model_params(gono_params = gono_params(1)[[1]],
vax_params = vp, n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt, )
y <- mod$transform_variables(y)
expect_equal(diff(apply(y$cum_vaccinated, 1, sum))[tt[-length(tt)] > 2 / 365],
c(0, 0))
}
})
test_that("aggregated time series output correctly", {
## check with single parameter set
for (i in 1:5){
n_diag_rec <- i
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt)
y <- mod$transform_variables(y)
expect_equal(y$tot_treated, apply(y$cum_treated, 1, sum))
expect_equal(y$tot_attended, apply(y$cum_screened, 1, sum) + y$tot_treated)
}
})
library(devtools)
load_all()
test_that("aggregated time series output correctly", {
## check with single parameter set
for (i in 1:5){
n_diag_rec <- i
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt)
y <- mod$transform_variables(y)
expect_equal(y$tot_treated, apply(y$cum_treated, 1, sum))
expect_equal(y$tot_attended, apply(y$cum_screened, 1, sum) + y$tot_treated)
}
})
test_that("time-varying eta works as expected", {
for (i in 1:5){
n_diag_rec <- i
gono_pars <- gono_params(1)[[1]]
params <- model_params(gono_params = gono_pars, n_diag_rec = n_diag_rec)
params$tt <- c(0, 1, 2)
gono_pars$eta <- 1
params$eta_l_t <- params$eta_h_t <- gono_pars$eta * c(1, 2, 2)
params$beta_t <- rep(gono_pars$beta[1], 3)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq(0, 2, by = 1 / 12)
y <- mod$run(tt)
y <- mod$transform_variables(y)
plot(tt[-1] + 2009, diff(rowSums(y$cum_screened)))
expect_equal(y$eta[, 1], approx(params$tt, params$eta_l_t, tt)$y)
expect_equal(y$eta[, 2], approx(params$tt, params$eta_h_t, tt)$y)
# check can vary wrt group
params$eta_l_t[] <- gono_pars$eta
mod <- model$new(user = params, unused_user_action = "ignore")
y <- mod$run(tt)
y <- mod$transform_variables(y)
matplot(apply(y$cum_screened, 2, diff), type = "l")
expect_equal(y$eta[, 1], approx(params$tt, params$eta_l_t, tt)$y)
expect_equal(y$eta[, 2], approx(params$tt, params$eta_h_t, tt)$y)
# check can switch off screening in a group
params$eta_l_t[] <- 0
mod <- model$new(user = params, unused_user_action = "ignore")
y1 <- mod$run(tt)
y1 <- mod$transform_variables(y1)
expect_equal(sum(y1$cum_screened[, 1, ]), 0)
expect_true(all(y1$cum_screened[-1, 2, ] > 0))
}
})
n_diag_rec = 2
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
if (n_diag_rec == 2){
params$vea = c(0,0)
params$ved = c(0,0)
params$vei = c(0,0)
params$ves = c(0,0)
params$willing = c(1,0)
params$wd = matrix(data = c(0,0,0,0), nrow = 2, ncol = 2)
}
params$enr = 0
params$exr = 0
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt)
y <- mod$transform_variables(y)
y$cum_treated[, 2, 1]
y$N[, 2, 2]
y$N[,1,1] + y$N[,2,1] + y$N[,1,2] + y$N[,2,2]
expect_equivalent(y$cum_treated[, 2, 1], y$N[, 2, 2], tol = 1e-12)
expect_equivalent(y$cum_treated[, 1, 1], y$N[, 1, 2], tol = 1e-12)
expect_equivalent(y$cum_treated[, 2, 1], y$N[, 2, 2], tol = 1e-12)
expect_equivalent(y$cum_treated[, 2, 3], y$N[, 2, 4], tol = 1e-12)
n_diag_rec = 2
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
if (n_diag_rec == 2){
params$vea = c(0,0)
params$ved = c(0,0)
params$vei = c(0,0)
params$ves = c(0,0)
params$willing = c(1,0)
params$wd = matrix(data = c(0,0,0,0), nrow = 2, ncol = 2)
}
params$enr = 0
params$exr = 0
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt)
y <- mod$transform_variables(y)
expect_equivalent(y$cum_treated[, 1, n_diag_rec-1], y$N[, 1, n_diag_rec], tol = 1e-12)
expect_equivalent(y$cum_treated[, 2, n_diag_rec-1], y$N[, 2, n_diag_rec], tol = 1e-12)
y$cum_treated
y$N
diff(y$cum_treated[, 2, 1])
diff(rowSums(y$N[, 2, 2:3])
)
n_diag_rec = 3
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
if (n_diag_rec == 2){
params$vea = c(0,0)
params$ved = c(0,0)
params$vei = c(0,0)
params$ves = c(0,0)
params$willing = c(1,0)
params$wd = matrix(data = c(0,0,0,0), nrow = 2, ncol = 2)
}
params$enr = 0
params$exr = 0
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt)
y <- mod$transform_variables(y)
expect_equivalent(y$cum_treated[, 1, n_diag_rec-1], y$N[, 1, n_diag_rec], tol = 1e-12)
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt)
y <- mod$transform_variables(y)
expect_equivalent(y$cum_treated[, 1, n_diag_rec-1], y$N[, 1, n_diag_rec], tol = 1e-9)
expect_equivalent(y$cum_treated[, 2, n_diag_rec-1], y$N[, 2, n_diag_rec], tol = 1e-9)
expect_equivalent(y$cum_treated[, 1, n_diag_rec-1], y$N[, 1, n_diag_rec], tol = 1e-8)
expect_equivalent(y$cum_treated[, 2, n_diag_rec-1], y$N[, 2, n_diag_rec], tol = 1e-8)
y$cum_treated
y$N
y$cum_treated[,2,1]
y$N[,2,2:3]
rowsums(y$N[,2,2:3])
rowAums(y$N[,2,2:3])
rowSums(y$N[,2,2:3])
diff(rowSums(y$N[,2,2:3]))
diff(rowSums(y$cum_treated[,2,1]))
diff(y$cum_treated[,2,1]))
diff(y$cum_treated[,2,1])
n_diag_rec = 3
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
if (n_diag_rec == 2){
params$vea = c(0,0)
params$ved = c(0,0)
params$vei = c(0,0)
params$ves = c(0,0)
params$willing = c(1,0)
params$wd = matrix(data =  rep(0, n_diag_rec*n_diag_rec), nrow = n_diag_rec, ncol = n_diag_rec)
}
params$enr = 0
params$exr = 0
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt)
y <- mod$transform_variables(y)
expect_equivalent(y$cum_treated[, 1, n_diag_rec-1], y$N[, 1, n_diag_rec], tol = 1e-8)
expect_equivalent(y$cum_treated[, 2, n_diag_rec-1], y$N[, 2, n_diag_rec], tol = 1e-8)
diff(y$cum_treated[, 2, 1])
diff(rowSums(y$N[, 2, 2:3])
)
n_diag_rec = 3
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
params$vea
params$ved
params$vei
params$ves
params$willing
params$wd
params$wd = matrix(data =  rep(0, n_diag_rec*n_diag_rec), nrow = n_diag_rec, ncol = n_diag_rec)
params$enr = 0
params$exr = 0
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt)
y <- mod$transform_variables(y)
expect_equivalent(y$cum_treated[, 1, n_diag_rec-1], y$N[, 1, n_diag_rec], tol = 1e-8)
expect_equivalent(y$cum_treated[, 2, n_diag_rec-1], y$N[, 2, n_diag_rec], tol = 1e-8)
diff(y$cum_treated[, 2, 1])
diff(rowSums(y$N[, 2, 2:3]))
expect_equivalent(diff(y$cum_treated[, 2, 2]), diff(y$N[, 2, 3]), tol = 1e-12 )
diff(y$cum_treated[, 2, 2])
diff(y$N[, 2, 3])
y$cum_treated
for (ii in 2:i){
expect_equivalent(diff(y$cum_treated[, 2, ii-1]), diff(rowSums(y$N[, 2, ii:3])),  tol = 1e-12)
}
i <- 3
for (ii in 2:n_diag_rec){
expect_equivalent(diff(y$cum_treated[, 2, ii-1]), diff(rowSums(y$N[, 2, ii:n_diag_rec])),  tol = 1e-12)
}
for (ii in 2:n_diag_rec){
if (ii < n_diag_rec){
expect_equivalent(diff(y$cum_treated[, 2, ii-1]), diff(rowSums(y$N[, 2, ii:n_diag_rec])),  tol = 1e-12)
} else{
expect_equivalent(diff(y$cum_treated[, 2, ii-1]), diff(y$N[, 2, n_diag_rec]),  tol = 1e-12)
}
}
n_diag_rec = 2
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
params$wd = matrix(data =  rep(0, n_diag_rec*n_diag_rec), nrow = n_diag_rec, ncol = n_diag_rec)
params$enr = 0
params$exr = 0
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt)
y <- mod$transform_variables(y)
expect_equivalent(y$cum_treated[, 1, n_diag_rec-1], y$N[, 1, n_diag_rec], tol = 1e-8)
expect_equivalent(y$cum_treated[, 2, n_diag_rec-1], y$N[, 2, n_diag_rec], tol = 1e-8)
for (ii in 2:n_diag_rec){
if (ii < n_diag_rec){
expect_equivalent(diff(y$cum_treated[, 2, ii-1]), diff(rowSums(y$N[, 2, ii:n_diag_rec])),  tol = 1e-12)
} else{
expect_equivalent(diff(y$cum_treated[, 2, ii-1]), diff(y$N[, 2, n_diag_rec]),  tol = 1e-12)
}
}
n_diag_rec = 4
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
params$wd = matrix(data =  rep(0, n_diag_rec*n_diag_rec), nrow = n_diag_rec, ncol = n_diag_rec)
params$enr = 0
params$exr = 0
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt)
y <- mod$transform_variables(y)
expect_equivalent(y$cum_treated[, 1, n_diag_rec-1], y$N[, 1, n_diag_rec], tol = 1e-8)
expect_equivalent(y$cum_treated[, 2, n_diag_rec-1], y$N[, 2, n_diag_rec], tol = 1e-8)
for (ii in 2:n_diag_rec){
if (ii < n_diag_rec){
expect_equivalent(diff(y$cum_treated[, 2, ii-1]), diff(rowSums(y$N[, 2, ii:n_diag_rec])),  tol = 1e-12)
} else{
expect_equivalent(diff(y$cum_treated[, 2, ii-1]), diff(y$N[, 2, n_diag_rec]),  tol = 1e-12)
}
}
n_diag_rec = 5
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
params$wd = matrix(data =  rep(0, n_diag_rec*n_diag_rec), nrow = n_diag_rec, ncol = n_diag_rec)
params$enr = 0
params$exr = 0
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt)
y <- mod$transform_variables(y)
expect_equivalent(y$cum_treated[, 1, n_diag_rec-1], y$N[, 1, n_diag_rec], tol = 1e-8)
expect_equivalent(y$cum_treated[, 2, n_diag_rec-1], y$N[, 2, n_diag_rec], tol = 1e-8)
for (ii in 2:n_diag_rec){
if (ii < n_diag_rec){
expect_equivalent(diff(y$cum_treated[, 2, ii-1]), diff(rowSums(y$N[, 2, ii:n_diag_rec])),  tol = 1e-12)
} else{
expect_equivalent(diff(y$cum_treated[, 2, ii-1]), diff(y$N[, 2, n_diag_rec]),  tol = 1e-12)
}
}
test_that("for n_diag_rec > 1, the number treated = the number recorded
as diagnosed", {
for (i in 2:5){
n_diag_rec = 5
params <- model_params(gono_params = gono_params(1)[[1]], n_diag_rec = n_diag_rec)
params$wd = matrix(data =  rep(0, n_diag_rec*n_diag_rec), nrow = n_diag_rec, ncol = n_diag_rec)
params$enr = 0
params$exr = 0
mod <- model$new(user = params, unused_user_action = "ignore")
tt <- seq.int(0, 5) / 365
y <- mod$run(tt)
y <- mod$transform_variables(y)
expect_equivalent(y$cum_treated[, 1, n_diag_rec-1], y$N[, 1, n_diag_rec], tol = 1e-8)
expect_equivalent(y$cum_treated[, 2, n_diag_rec-1], y$N[, 2, n_diag_rec], tol = 1e-8)
for (ii in 2:n_diag_rec){
if (ii < n_diag_rec){
expect_equivalent(diff(y$cum_treated[, 2, ii-1]), diff(rowSums(y$N[, 2, ii:n_diag_rec])),  tol = 1e-12)
} else{
expect_equivalent(diff(y$cum_treated[, 2, ii-1]), diff(y$N[, 2, n_diag_rec]),  tol = 1e-12)
}
}
}
})
