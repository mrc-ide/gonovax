names(y[[1]])
dim(y[[1]]$cum_incid)
dimnames(y[[1]]$cum_incid)
# cumulative incidence in unvaccinated group L over time
y[[1]]$cum_incid[, "L", "X"]
total_infected <- aggregate(y, what = "cum_incid")
col <- rgb(0.5, 0.5, 0.5, 0.3)
matplot(tt, t(total_infected), lty = 1, type = "l", col = col,
xlab = "Time", ylab = "Cumulative infections")
annual_infected <- aggregate(y, what = "cum_incid", as_incid = TRUE)
matplot(tt[-1], t(annual_infected), lty = 1, type = "l", col = col,
xlab = "Time", ylab = "Annual infections")
annual_infected_X <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "X")
annual_infected_V <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "V")
col1 <- rgb(0.5, 0, 0, 0.3)
col2 <- rgb(0, 0, 0.5, 0.3)
matplot(tt[-1], t(annual_infected_X), lty = 1, type = "l", col = col1,
xlab = "Time", ylab = "Annual infections")
matlines(tt[-1], t(annual_infected_V), lty = 1, col = col2)
legend("top", fill = c(col1, col2), legend = c("Unvaccinated", "Vaccinated"),
ncol = 2)
mean_ci <- function(x) c(mean = mean(x), quantile(x, c(0.025, 0.975)))
summary_annual_infected_X <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "X", f = mean_ci)
summary_annual_infected_V <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "V", f = mean_ci)
col1 <- "red"
col2 <- "blue"
matplot(tt[-1], t(summary_annual_infected_X), lty = c(1, 2, 2), type = "l", col = col1,
xlab = "Time", ylab = "Annual infections")
matlines(tt[-1], t(summary_annual_infected_V), lty = c(1, 2, 2), col = col2)
legend("top", fill = c(col1, col2), legend = c("Unvaccinated", "Vaccinated"),
ncol = 2)
names(y[[1]])
dim(y[[1]]$cum_incid)
dimnames(y[[1]]$cum_incid)
y[[1]]$cum_incid[, "L", "X"]
total_infected <- aggregate(y, what = "cum_incid")
col <- rgb(0.5, 0.5, 0.5, 0.3)
matplot(tt, t(total_infected), lty = 1, type = "l", col = col,
xlab = "Time", ylab = "Cumulative infections")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
par(mar = c(3, 3, 1, 1), mgp = c(1.7, 0.7, 0), bty = "n")
library("gonovax")
parameter_table <- read.csv(system.file("extdata/gono_params_t.csv",package='gonovax'))
head(parameter_table)
n_par <- 100
# transform the parameter table
gono_params <- lapply(seq_len(n_par),
function(i) transform_fixed(parameter_table[i, ]))
# define the times of the output (in years)
tt <- c(0, 50)
# run the model
y0 <- run_onevax_xvwv(tt, gono_params)
# get final (equilibrium) model state to use as starting point of run with vaccination
init_params <- lapply(y0, restart_params)
# generate vaccine effects parameters
ve <- data.frame(vea = 0.1, # efficacy against acquisition
vei = 0.2, # efficacy against infectiousness
ved = 0.3, # efficacy against duration of infection
ves = 0.4) # efficacy against symptoms
tt <- seq(0, 10)
y <- run_onevax_xvwv(tt,
gono_params = gono_params,
init_params = init_params,
vea = ve$vea, ved = ve$ved, ves = ve$ves,
uptake = 1, strategy = "VoA")
names(y[[1]])
dim(y[[1]]$cum_incid)
dimnames(y[[1]]$cum_incid)
# cumulative incidence in unvaccinated group L over time
y[[1]]$cum_incid[, "L", "X"]
total_infected <- aggregate(y, what = "cum_incid")
col <- rgb(0.5, 0.5, 0.5, 0.3)
matplot(tt, t(total_infected), lty = 1, type = "l", col = col,
xlab = "Time", ylab = "Cumulative infections")
annual_infected <- aggregate(y, what = "cum_incid", as_incid = TRUE)
matplot(tt[-1], t(annual_infected), lty = 1, type = "l", col = col,
xlab = "Time", ylab = "Annual infections")
annual_infected_X <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "X")
annual_infected_V <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "V")
col1 <- rgb(0.5, 0, 0, 0.3)
col2 <- rgb(0, 0, 0.5, 0.3)
matplot(tt[-1], t(annual_infected_X), lty = 1, type = "l", col = col1,
xlab = "Time", ylab = "Annual infections")
matlines(tt[-1], t(annual_infected_V), lty = 1, col = col2)
legend("top", fill = c(col1, col2), legend = c("Unvaccinated", "Vaccinated"),
ncol = 2)
mean_ci <- function(x) c(mean = mean(x), quantile(x, c(0.025, 0.975)))
summary_annual_infected_X <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "X", f = mean_ci)
summary_annual_infected_V <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "V", f = mean_ci)
col1 <- "red"
col2 <- "blue"
matplot(tt[-1], t(summary_annual_infected_X), lty = c(1, 2, 2), type = "l", col = col1,
xlab = "Time", ylab = "Annual infections")
matlines(tt[-1], t(summary_annual_infected_V), lty = c(1, 2, 2), col = col2)
legend("top", fill = c(col1, col2), legend = c("Unvaccinated", "Vaccinated"),
ncol = 2)
View(y)
library(devtoolS)
library(devtools)
devtools:check_man()
devtools::check_man()
install.packages(htmltools)
install.packages("htmltools")
install.packages("htmltools")
devtools::check_man()
library(roxygen2)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(devtools)
install.packages("htmltools")
install.packages("htmltools")
library(devtools)
library(devtools)
install.packages("htmltools")
install.packages("htmltools")
library(devtools)
load_all()
devtools::check()
devtools::check()
roxygen2::roxygenize()
roxygen2::roxygenize()
load_all()
devtools::check()
roxygen2::roxygenize()
load_all()
devtools::check()
roxygen2::roxygenize()
load_all()
devtools::check()
update.packages(ask = FALSE, dependencies = TRUE)
devtools::document()
devtools::build_vignettes()
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
par(mar = c(3, 3, 1, 1), mgp = c(1.7, 0.7, 0), bty = "n")
library("gonovax")
parameter_table <- read.csv(system.file("extdata/gono_params_t.csv",package='gonovax'))
head(parameter_table)
n_par <- 100
# transform the parameter table
gono_params <- lapply(seq_len(n_par),
function(i) transform_fixed(parameter_table[i, ]))
# define the times of the output (in years)
tt <- c(0, 50)
# run the model
y0 <- run_onevax_xvwv(tt, gono_params)
# get final (equilibrium) model state to use as starting point of run with vaccination
init_params <- lapply(y0, restart_params)
# generate vaccine effects parameters
ve <- data.frame(vea = 0.1, # efficacy against acquisition
vei = 0.2, # efficacy against infectiousness
ved = 0.3, # efficacy against duration of infection
ves = 0.4) # efficacy against symptoms
tt <- seq(0, 10)
y <- run_onevax_xvwv(tt,
gono_params = gono_params,
init_params = init_params,
vea = ve$vea, ved = ve$ved, ves = ve$ves,
uptake = 1, strategy = "VoA")
#names(y[[1]])
#dim(y[[1]]$cum_incid)
#dimnames(y[[1]]$cum_incid)
# cumulative incidence in unvaccinated group L over time
#y[[1]]$cum_incid[, "L", "X"]
total_infected <- aggregate(y, what = "cum_incid")
col <- rgb(0.5, 0.5, 0.5, 0.3)
matplot(tt, t(total_infected), lty = 1, type = "l", col = col,
xlab = "Time", ylab = "Cumulative infections")
annual_infected <- aggregate(y, what = "cum_incid", as_incid = TRUE)
matplot(tt[-1], t(annual_infected), lty = 1, type = "l", col = col,
xlab = "Time", ylab = "Annual infections")
annual_infected_X <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "X")
annual_infected <- aggregate(y, what = "cum_incid", as_incid = TRUE)
matplot(tt[-1], t(annual_infected), lty = 1, type = "l", col = col,
xlab = "Time", ylab = "Annual infections")
annual_infected_X <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "X")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
par(mar = c(3, 3, 1, 1), mgp = c(1.7, 0.7, 0), bty = "n")
library("gonovax")
parameter_table <- read.csv(system.file("extdata/gono_params_t.csv",package='gonovax'))
head(parameter_table)
n_par <- 100
# transform the parameter table
gono_params <- lapply(seq_len(n_par),
function(i) transform_fixed(parameter_table[i, ]))
# define the times of the output (in years)
tt <- c(0, 50)
# run the model
y0 <- run_onevax_xvwv(tt, gono_params)
# get final (equilibrium) model state to use as starting point of run with vaccination
init_params <- lapply(y0, restart_params)
# generate vaccine effects parameters
ve <- data.frame(vea = 0.1, # efficacy against acquisition
vei = 0.2, # efficacy against infectiousness
ved = 0.3, # efficacy against duration of infection
ves = 0.4) # efficacy against symptoms
tt <- seq(0, 10)
y <- run_onevax_xvwv(tt,
gono_params = gono_params,
init_params = init_params,
vea = ve$vea, ved = ve$ved, ves = ve$ves,
uptake = 1, strategy = "VoA")
names(y[[1]])
dim(y[[1]]$cum_incid)
dimnames(y[[1]]$cum_incid)
# cumulative incidence in unvaccinated group L over time
y[[1]]$cum_incid[, "L", "X"]
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
par(mar = c(3, 3, 1, 1), mgp = c(1.7, 0.7, 0), bty = "n")
library("gonovax")
parameter_table <- read.csv(system.file("extdata/gono_params_t.csv",package='gonovax'))
head(parameter_table)
n_par <- 100
# transform the parameter table
gono_params <- lapply(seq_len(n_par),
function(i) transform_fixed(parameter_table[i, ]))
# define the times of the output (in years)
tt <- c(0, 50)
# run the model
y0 <- run_onevax_xvwv(tt, gono_params)
# get final (equilibrium) model state to use as starting point of run with vaccination
init_params <- lapply(y0, restart_params)
# generate vaccine effects parameters
ve <- data.frame(vea = 0.1, # efficacy against acquisition
vei = 0.2, # efficacy against infectiousness
ved = 0.3, # efficacy against duration of infection
ves = 0.4) # efficacy against symptoms
tt <- seq(0, 10)
y <- run_onevax_xvwv(tt,
gono_params = gono_params,
init_params = init_params,
vea = ve$vea, ved = ve$ved, ves = ve$ves,
uptake = 1, strategy = "VoA")
names(y[[1]])
dim(y[[1]]$cum_incid)
dimnames(y[[1]]$cum_incid)
# cumulative incidence in unvaccinated group L over time
y[[1]]$cum_incid[, "L", "X.I"]
total_infected <- aggregate(y, what = "cum_incid")
col <- rgb(0.5, 0.5, 0.5, 0.3)
matplot(tt, t(total_infected), lty = 1, type = "l", col = col,
xlab = "Time", ylab = "Cumulative infections")
annual_infected <- aggregate(y, what = "cum_incid", as_incid = TRUE)
matplot(tt[-1], t(annual_infected), lty = 1, type = "l", col = col,
xlab = "Time", ylab = "Annual infections")
annual_infected_X <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "X.I")
annual_infected_V <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "V.I")
annual_infected_X <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "X.I")
annual_infected_V <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "V.I")
View(y)
y[[1]]$U
annual_infected_X <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "X.I")
annual_infected_V <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "V1.I")
col1 <- rgb(0.5, 0, 0, 0.3)
col2 <- rgb(0, 0, 0.5, 0.3)
matplot(tt[-1], t(annual_infected_X), lty = 1, type = "l", col = col1,
xlab = "Time", ylab = "Annual infections")
matlines(tt[-1], t(annual_infected_V), lty = 1, col = col2)
legend("top", fill = c(col1, col2), legend = c("Unvaccinated", "Vaccinated"),
ncol = 2)
mean_ci <- function(x) c(mean = mean(x), quantile(x, c(0.025, 0.975)))
summary_annual_infected_X <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "X.I", f = mean_ci)
summary_annual_infected_V <- aggregate(y, what = "cum_incid", as_incid = TRUE,
stratum = "V1.I", f = mean_ci)
col1 <- "red"
col2 <- "blue"
matplot(tt[-1], t(summary_annual_infected_X), lty = c(1, 2, 2), type = "l", col = col1,
xlab = "Time", ylab = "Annual infections")
matlines(tt[-1], t(summary_annual_infected_V), lty = c(1, 2, 2), col = col2)
legend("top", fill = c(col1, col2), legend = c("Unvaccinated", "Vaccinated"),
ncol = 2)
load_all()
devtools::check()
packageVersion(odin()
packageVersion(odin())
packageVersion(odin
)
packageVersion("odin")
install.packages("odin")
install.packages("odin")
packageVersion("odin")
load_all()
library(devtools)
load_all()
devtools::check()
odin::odin_package(here::here())
odin::odin_package(here::here())
drat:::add("mrc-ide")
install.packages("drat")
drat:::add("mrc-ide")
install.packages("odin")
install.packages("odin")
odin::odin_package(here::here())
devtools::check()
install_github("mrc-ide/odin", ref = "mrc-5101")
library(devtools)
install_github("mrc-ide/odin", ref = "mrc-5101")
odin::odin_package(here::here())
library(devtools)
install.packages("odin")
packageVersion("odin")
drat:::add("mrc-ide")
install.packages("odin")
packageVersion("odin")
devtools::install_github("mrc-ide/odin", upgrade = FALSE)
library(odin)
packageVersion("odin")
odin::odin_package(here::here())
library(gonovax)
package_version("gonovax")
library(devtools)
load_all()
load_all()
library(devtools)
load_all()
load_all()
load_all()
odin::odin_package()
odin::odin_package(here::here())
install.packages("here")
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
odin::odin_package(here::here())
lintr::lint("C:/Users/tleng1/OneDrive - Imperial College London/Documents/GitHub/gonovax/inst/odin/model_withPN.R")
install.packages("lintr")
lintr::lint("C:/Users/tleng1/OneDrive - Imperial College London/Documents/GitHub/gonovax/inst/odin/model_withPN.R")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
par(mar = c(3, 3, 1, 1), mgp = c(1.7, 0.7, 0), bty = "n")
library("gonovax")
parameter_table <- read.csv(system.file("extdata/gono_params_t.csv",package='gonovax'))
head(parameter_table)
View(parameter_table)
n_par <- 100
# transform the parameter table
gono_params <- lapply(seq_len(n_par),
function(i) transform_fixed(parameter_table[i, ]))
View(gono_params)
tt <- c(0, 50)
# run the model
#y0 <- run_onevax_xvwv(tt, gono_params)
#
y0 <- run_onevax_xpvwrh(tt, gono_params, PN = "yes")
library(devtools)
load_all()
tt <- c(0, 50)
# run the model
#y0 <- run_onevax_xvwv(tt, gono_params)
#
y0 <- run_onevax_xpvwrh(tt, gono_params, PN = "yes")
n_par <- 100
# transform the parameter table
gono_params <- lapply(seq_len(n_par),
function(i) transform_fixed(parameter_table[i, ]))
tt <- c(0, 50)
# run the model
#y0 <- run_onevax_xvwv(tt, gono_params)
#
y0 <- run_onevax_xpvwrh(tt, gono_params, PN = "yes")
# get final (equilibrium) model state to use as starting point of run with vaccination
init_params <- lapply(y0, restart_params)
n_diag_rec = 1
# generate vaccine effects parameters
ve <- data.frame(vea = 0.4, # efficacy against acquisition
vei = 0.0, # efficacy against infectiousness
ved = 0.0, # efficacy against duration of infection
ves = 0.0) # efficacy against symptoms
tt <- seq(0, 10)
# y <- run_onevax_xvwv(tt,
#                      gono_params = gono_params,
#                      init_params = init_params,
#                      vea = ve$vea, ved = ve$ved, ves = ve$ves,
#                      uptake = 1, strategy = "VoA")
#gono_params[[1]]$beta_t = c(0,0)
## DIAGNOSIS WITH VACCINATION NOW LOOKS GOOD - BUT STILL NEED TO DO PROPER SANITY CHECKS (14 JULY)
y <- run_onevax_xpvwrh(tt,
gono_params = gono_params,
init_params = init_params,
vea = ve$vea, ved = ve$ved, ves = ve$ves, strategy = NULL, n_erlang = 1, n_diag_rec = n_diag_rec, r1 = 0.41, r2 = 0.6, PN = "yes")
yRD <- run_onevax_xpvwrh(tt,
gono_params = gono_params,
init_params = init_params,
vea = ve$vea, ved = ve$ved, ves = ve$ves, strategy = "VaH", n_erlang = 1, n_diag_rec = n_diag_rec, r1 = 0.41, r2 = 0.6, PN = "yes")
yD <- run_onevax_xpvwrh(tt,
gono_params = gono_params,
init_params = init_params,
vea = ve$vea, ved = ve$ved, ves = ve$ves, strategy = "VoD", n_erlang = 1, n_diag_rec = n_diag_rec, r1 = 0.41, r2 = 0.6, PN = "yes")
yR <- run_onevax_xpvwrh(tt,
gono_params = gono_params,
init_params = init_params,
vea = ve$vea, ved = ve$ved, ves = ve$ves, strategy = "VoD(L)+VoA(H)", n_erlang = 1, n_diag_rec = n_diag_rec, r1 = 0.41, r2 = 0.6, PN = "yes")
#gono_params[[1]]$notification_param = (0.17*temp4[2])/temp3[2]
tempC = numeric(length = 1)
tempD = numeric(length = 1)
tempZZ = numeric(length = 1)
yPN <- run_onevax_xpvwrh(tt,
gono_params = gono_params,
init_params = init_params,
vea = ve$vea, ved = ve$ved, ves = ve$ves, strategy = "VoN", n_erlang = 1, n_diag_rec = n_diag_rec, r1 = 0, r2 = 0, PN = "yes")
for (i in 1:100){
tempA = yPN[[i]]$cum_diag_a[,1,] + yPN[[i]]$cum_diag_a[,2,] + yPN[[i]]$cum_diag_s[,1,] + yPN[[i]]$cum_diag_s[,2,]
#tempB = yPN[[i]]$cum_offered_pn[,1,] + yPN[[i]]$cum_offered_pn[,2,]
tempB = sum(yPN[[i]]$phi[1,1,] + yPN[[i]]$phi[1,2,])
tempC[i] = sum(tempA[2,1:3])
tempD[i] = tempB #sum(tempB[2, 1:3])
#print(tempC[i])
#print(tempD[i])
tempX = yPN[[i]]$phi[1,1,1] + yPN[[1]]$phi[1,2,1]
tempY = yPN[[i]]$notifiedandattended[1,1,1] + yPN[[1]]$notifiedandattended[1,2,1]
#print(tempX)
#print(tempY)
print(1 - tempX/tempY)
tempZZ[i] = 1 - tempX/tempY
gono_params[[i]]$kappa = 0.17*tempC[i]/tempD[i]
}
yPN2 <- run_onevax_xpvwrh(tt,
gono_params = gono_params,
init_params = init_params,
vea = ve$vea, ved = ve$ved, ves = ve$ves, strategy = "VoN", n_erlang = 1, n_diag_rec = n_diag_rec, r1 = 0.41, r2 = 0.6, PN = "yes")
tempC2 = numeric(length = 1)
tempD2 = numeric(length = 1)
for (i in 1:100){
tempA = yPN2[[i]]$cum_diag_a[,1,] + yPN2[[i]]$cum_diag_a[,2,] + yPN2[[i]]$cum_diag_s[,1,] + yPN2[[i]]$cum_diag_s[,2,]
tempB = yPN2[[i]]$cum_offered_pn[,1,] + yPN2[[i]]$cum_offered_pn[,2,]
tempC2[i] = sum(tempA[2,1:3])
tempD2[i] = sum(tempB[2, 1:3])
print(tempC2[i])
print(tempD2[i])
#gono_params[[i]]$kappa = 0.17*tempD[i]/tempC[i]
}
# yD <- run_onevax_xvwv_Diagnosis(tt,
#                      gono_params = gono_params,
#                      init_params = init_params,
#                      vea = ve$vea, ved = ve$ved, ves = ve$ves, strategy = "VoD", uptake = 1, n_diag_rec = 3)
#
#
# yRD <- run_onevax_xvwv_Diagnosis(tt,
#                      gono_params = gono_params,
#                      init_params = init_params,
#                      vea = ve$vea, ved = ve$ved, ves = ve$ves, strategy = "VoRD", uptake = 1, n_diag_rec = 3)
#
# yR <- run_onevax_xvwv_Diagnosis(tt,
#                      gono_params = gono_params,
#                      init_params = init_params,
#                      vea = ve$vea, ved = ve$ved, ves = ve$ves, strategy = "VoD(L)+VoA(H)", uptake = 1, n_diag_rec = 3)
tempX = yPN[[1]]$phi[1,1,1] + yPN[[1]]$phi[1,2,1]
tempY = yPN[[1]]$notifiedandattended[1,1,1] + yPN[[1]]$notifiedandattended[1,2,1]
#print(tempX)
#print(tempY)
#print(1 - tempX/tempY)
tempX2 = yPN2[[1]]$phi[1,1,1] + yPN2[[1]]$phi[1,2,1]
tempY2 = yPN2[[1]]$notifiedandattended[1,1,1] + yPN2[[1]]$notifiedandattended[1,2,1]
#print(tempX2)
#print(tempY2)
#print(1 - tempX2/tempY2)
#print(yPN[[1]]$phi[1,1,1] + yPN[[1]]$phi[1,2,1])
#print(yPN[[1]]$notifiedandattended[1,1,1] + yPN[[1]]$notified[1,2,1])
qauntile(tempZZ, c(0.025, 0.5, 0.975))
quanntile(tempZZ, c(0.025, 0.5, 0.975))
quantile(tempZZ, c(0.025, 0.5, 0.975))
